---
// Reduce bubble count for better performance
const bubbles = Array.from({ length: 40 }, (_, i) => ({
  id: i + 1,
  size: `${Math.random() * 30 + 10}px`,
  left: `${Math.random() * 95}%`,
  delay: `${Math.random() * 8}s`, // Positive delays only
  duration: `${Math.random() * 10 + 8}s`, // Slightly faster animations
}));

const instanceId = Math.random().toString(36).substring(2, 9);
---

<style lang="postcss">
  .bubble {
    @apply absolute rounded-full bg-radial-[at_50%_75%] from-[transparent] via-[#bedbff6f] to-[transparent] to-90%;
    bottom: -10px; /* Start slightly below the container */
    will-change: transform, opacity;
    /*animation: bubble linear infinite; */
    opacity: 0; /* Start transparent */
    border: 1px solid #e4e4e4;
  }

  .tickets-button {
    background-size: 200% 100%;
    animation: shimmer 3s linear infinite;
    position: relative;
    overflow: hidden;
  }

  .tickets-button::before {
    content: '';
    position: absolute;
    top: -50%;
    left: -50%;
    width: 200%;
    height: 200%;
    background: linear-gradient(to right, transparent, rgba(255, 255, 255, 0.3), transparent);
    transform: rotate(30deg);
    animation: shine 3s linear infinite;
  }

  @keyframes shimmer {
    0% { background-position: 0% 0; }
    100% { background-position: 200% 0; }
  }

  @keyframes shine {
    0% { transform: translateX(-100%) rotate(30deg); }
    100% { transform: translateX(100%) rotate(50deg); }
  }
</style>

<div class="pointer-events-none absolute inset-0 overflow-hidden h-full ocean" data-id={instanceId}>
  {bubbles.map((bubble) => (
    <div
      class="bubble tickets-button "
      style={`
        width: ${bubble.size};
        height: ${bubble.size};
        left: ${bubble.left};
        animation-duration: ${bubble.duration};
        animation-delay: ${bubble.delay};
      `}
    ></div>
  ))}
</div>

<script lang="ts">
  if (typeof document !== "undefined") {
    // Use requestAnimationFrame for better performance
    const initBubbles = () => {
      const oceanContainers = document.querySelectorAll('.ocean');
      oceanContainers.forEach((ocean) => {
        if (ocean instanceof HTMLElement) {
          const instanceId = ocean.getAttribute('data-id');
          const oceanHeight = ocean.offsetHeight;
          const style = document.createElement('style');
          document.head.appendChild(style);

          style.innerHTML = `
            .ocean[data-id="${instanceId}"] .bubble {
              animation-name: bubble-${instanceId};
            }

            @keyframes bubble-${instanceId} {
              0% {
                transform: translateY(0);
                opacity: 0;
                   background-position: 0% 0;
              }
              10% {
                opacity: 0.7; /* Fade in */
              }
              90% {
                opacity: 0.5;
              }
              100% {
                transform: translateY(-${oceanHeight + 20}px) ;
                opacity: 0; /* Fade out at the top */
                 background-position: 200% 0;
              }
            }
          `;
        }
      });
    };

    // Initialize on load and resize for responsive behavior
    if (document.readyState === 'loading') {
      document.addEventListener('DOMContentLoaded', initBubbles);
    } else {
      initBubbles();
    }
    
    window.addEventListener('resize', initBubbles);
  }
</script>
